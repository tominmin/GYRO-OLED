/*
 * OLED race game with gyro sensor(GY-80) 
 * The value of the gyro sensor is corrected by the Kalman filter.
 * How to use kalman filter,quoted from
 * http://cranberrytree.blogspot.jp/2014/06/gy-521mpu-6050-2.html
 * File generated by LCD Assistant
 * http://en.radzio.dxp.pl/bitmap_converter/
 * This is the easiest way to convert a bmp to an array to make bitmap graph
 * 
 */
#include <L3G4200D.h>
#include<Wire.h>
#include<SPI.h>
#include<SFE_MicroOLED.h>
#include<ADXL345.h>
#include"Kalman.h"

#define PIN_RESET 9
#define PIN_DC 8
#define PIN_CS 10
#define DC_JUMPER 0

MicroOLED oled(PIN_RESET,PIN_DC,PIN_CS);
L3G4200D gyro;
ADXL345 acc;
const float alpha=0.5;
double fXg=0;
double fYg=0;
double fZg=0;
Kalman kalmanX;
Kalman kalmanY;
double accX,accY,accZ;
double gyroX=0,gyroY=0,gyroZ=0;
double gyroXangle,gyroYangle,gyroZangle;
double compAngleX,compAngleY;
double kalAngleX,kalAngleY;
uint32_t timer;
float roll,pitch;
int  w=0;
int speed_car=150;
int car_x=10;//start position
int board[20][10];
bool left_check=false;
bool right_check=false;
bool jump_check=false;
int center_x=5;
bool gameover_flag=false;
bool speed_up=false;
bool motion_check1=true;
bool motion_check2=true;
int count=0;
int random(int max){
  return (int)((rand()/(RAND_MAX+1.0))*max);
}
uint8_t bender[]={
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
0xC0, 0xE0, 0x60, 0x70, 0x00, 0x20, 0x20, 0x20, 0x30, 0x60, 0xE0, 0xE0, 0x80, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x80, 0x04, 0x00,
0x01, 0x00, 0x00, 0x42, 0x02, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x03, 0x1F, 0x7F, 0x40,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x21, 0x11, 0x03, 0x07, 0x07, 0x07,
0x07, 0x06, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x04, 0x06, 0x04, 0x04, 0x07, 0x0C, 0x0C, 0x0C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

void setup() {
  acc.begin();
  delay(100);
  Wire.begin();
  gyro.enableDefault();
  oled.begin();
  oled.clear(ALL);
  oled.setFontType(0);
  oled.setCursor(0,0);
  oled.display();
  oled.clear(PAGE);
  oled.drawBitmap(bender);//draw initialize bitmap graphic of horse
  oled.setCursor(5,30
  );
  oled.print("Horse game");
  oled.display();
  delay(3000);
  oled.clear(PAGE);
  for(int i=0;i<20;i++){
    for(int j=0;j<10;j++){
      if(i==0||i==20)board[i][j]=1;
    }
  }
  //gyro sensor init
  roll=(atan2(fYg,fZg)*180.0)/M_PI;
  pitch=(atan2(-fXg,sqrt(fYg*fYg+fZg*fZg))*180.0)/M_PI;
  kalmanX.setAngle(roll);
  kalmanY.setAngle(pitch);
  gyroXangle=roll;
  gyroYangle=pitch;
  compAngleX=roll;
  compAngleY=pitch;
  timer=micros();
}

void pixelset(int x,int y){
  for(int i=0;i<2;i++){
    for(int j=0;j<2;j++){
      oled.pixel(x*2+i+10,y*2+j);
    }
  }
}
void pixel_draw(){
oled.clear(PAGE);
pixelset(car_x,10);
  for(int i=0;i<20;i++){
    for(int j=0;j<10;j++){
        if(board[i][j]){
        pixelset(i,j);
        }
    }
  }
oled.setCursor(10,30);
  if(left_check){     //check flag of motion and alert
    oled.print("left");
    left_check=false;
  }else if(right_check){
    oled.print("right");
    right_check=false;
  }  
 if(speed_up){
  oled.print("speed up!");
  speed_up=false; 
 }
 if(jump_check){
  oled.print("jump");
  jump_check=false;
 }
oled.setCursor(10,40);
oled.print(w);
oled.display();
delay(30);
}

void initialize(){
for(int i=0;i<20;i++){
    for(int j=3;j<10;j++){
      board[i][j]=0;
    }
  }
  
 for(int i=0;i<20;i++){
    for(int j=0;j<5;j++){
      if(i==0||i==20)board[i][j]=1;
    }
  }
w=0;
}
void jump(){
//change far two row spaces with random  
center_x=center_x+int(random(2));
for(int i=0;i<20;i++){
if(i<=(5+center_x)||i>=(11+center_x))
board[i][0]=1;
else board[i][0]=0;
}
center_x=center_x-int(random(2));
for(int i=0;i<20;i++){
if(i<=(5+center_x)||i>=(11+center_x))
board[i][1]=1;
else board[i][1]=0;
}
for(int j=9;j>=2;j--){  //make new field
  for(int i=0;i<20;i++){
    board[i][j]=board[i][j-2];
  }
}
delay(500);
}

void loop() {
double Xg,Yg,Zg;
acc.read(&Xg,&Yg,&Zg);
gyro.read();
double dt=(double)(micros()-timer)/1000000;
timer=micros();
fXg=Xg*alpha+(fXg*(1.0-alpha));
fYg=Yg*alpha+(fYg*(1.0-alpha));
fZg=Zg*alpha+(fZg*(1.0-alpha));
roll=(atan2(-fYg,fZg)*180.0)/M_PI;
pitch=(atan2(fXg,sqrt(fYg*fYg+fZg*fZg))*180.0)/M_PI;

double gyroXrate=gyroX/131.0;
double gyroYrate=gyroY/131.0;
double gyroZrate=gyroZ/131.0;
if((roll<-90&&kalAngleX>90)||(roll>90&&kalAngleX<-90)){
  kalmanX.setAngle(roll);
  compAngleX=roll;
  kalAngleX=roll;
  gyroXangle=roll;
}else
kalAngleX=kalmanX.getAngle(roll,gyroXrate,dt);
if(abs(kalAngleX)>90)
gyroYrate=-gyroYrate;
kalAngleY=kalmanY.getAngle(pitch,gyroYrate,dt);
gyroXangle+=gyroXrate*dt;
gyroYangle+=gyroYrate*dt;
gyroZangle+=gyroZrate*dt;
compAngleX=0.93*(compAngleX+gyroXrate*dt)+0.07*roll;
compAngleY=0.93*(compAngleY+gyroYrate*dt)+0.07*pitch;
if(gyroXangle<-180||gyroXangle>180)
gyroXangle=kalAngleX;
if(gyroYangle<-180||gyroYangle>180)
gyroYangle=kalAngleY;
w++;
if(board[car_x][9]==1){//gameover
  oled.clear(ALL);
  oled.setCursor(0,0);
  oled.print("BOOM");
  oled.display();
  delay(1000);
  initialize();
}
//make update of the screen
if(w%2==0){
for(int j=9;j>=0;j--){
  for(int i=0;i<20;i++){
    board[i][j]=board[i][j-1];
  }
}
if(w%4==0)
center_x=center_x+int(random(2));
else center_x=center_x-int(random(2));
if(center_x>7)center_x-=2;
else if(center_x<2)center_x+=2;

for(int i=0;i<20;i++){
if(i<=(5+center_x)||i>=(11+center_x))
board[i][0]=1;
else board[i][0]=0;
}
if(w%16==0){board[int(8+center_x+random(2))][0]=1;}
}
if(w%50==0){
for(int i=0;i<20;i++){
board[i][0]=1;
}
}

if(speed_car>50){
if(w%50==0){
  speed_up=true;
  speed_car-=10;
}
}

if(roll<-120&&roll>-160){
  motion_check1=false;
  count++;
  count=count%3;
if(motion_check1||count==0){
  car_x++;
  right_check=true;
}
}else if(roll>120&&roll<150){
  count++;
  count=count%3;
if(motion_check1||count==0){
  motion_check1=false;
  car_x--;
  left_check=true;
}
}
if(pitch<-10){
  jump_check=true;
// }
//write car jump action
jump();
//
} 
if(roll<180&&roll>160||roll>-180&&roll<-160){
  motion_check1=true;
}
if(pitch>0&&pitch<20){
  motion_check2=true;
}
pixel_draw();
delay(speed_car);  
}

